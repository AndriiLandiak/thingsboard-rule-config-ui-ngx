diff --git a/node_modules/ng-packagr/lib/flatten/rollup.d.ts b/node_modules/ng-packagr/lib/flatten/rollup.d.ts
index 2a6e2f8..678d8d3 100644
--- a/node_modules/ng-packagr/lib/flatten/rollup.d.ts
+++ b/node_modules/ng-packagr/lib/flatten/rollup.d.ts
@@ -11,6 +11,7 @@ export interface RollupOptions {
     entry: string;
     dest: string;
     sourceRoot: string;
+    format?: string;
     transform?: TransformHook;
     cache?: rollup.RollupCache;
     cacheDirectory?: string | false;
diff --git a/node_modules/ng-packagr/lib/flatten/rollup.js b/node_modules/ng-packagr/lib/flatten/rollup.js
index b9f2053..c177001 100644
--- a/node_modules/ng-packagr/lib/flatten/rollup.js
+++ b/node_modules/ng-packagr/lib/flatten/rollup.js
@@ -32,18 +32,36 @@ const plugin_node_resolve_1 = __importDefault(require("@rollup/plugin-node-resol
 const path = __importStar(require("path"));
 const rollup = __importStar(require("rollup"));
 const rollup_plugin_sourcemaps_1 = __importDefault(require("rollup-plugin-sourcemaps"));
+const terser = require("rollup-plugin-terser");
 const cache_1 = require("../utils/cache");
 const log = __importStar(require("../utils/log"));
 const path_1 = require("../utils/path");
+const fs = require('fs');
+const os = require('os');
+
 /** Runs rollup over the given entry file, writes a bundle file. */
 async function rollupBundleFile(opts) {
     var _a;
     log.debug(`rollup (v${rollup.VERSION}) ${opts.entry} to ${opts.dest}`);
     const cacheDirectory = opts.cacheDirectory;
     // Create the bundle
+    const data = fs.readFileSync(path.join(__dirname, '../../../thingsboard/src/app/modules/common/modules-map.ts'), 'utf8');
+    const reg = /private modulesMap: {\[key: string\]: any} = {([^;]*)};/gsm;
+    const regMatch = reg.exec(data);
+    const modulesStr = regMatch[1];
+    const externalModuleIds = [];
+    modulesStr.split(',' + os.EOL).forEach(
+      (line) => {
+        const moduleId = line.trim().split(":")[0].replaceAll("'", "").trim();
+        if (moduleId.length) {
+          externalModuleIds.push(moduleId);
+        }
+      }
+    );
+
     const bundle = await rollup.rollup({
         context: 'this',
-        external: moduleId => isExternalDependency(moduleId),
+        external: moduleId => isExternalDependency(moduleId, externalModuleIds),
         inlineDynamicImports: false,
         cache: (_a = opts.cache) !== null && _a !== void 0 ? _a : (cacheDirectory ? await (0, cache_1.readCacheEntry)(cacheDirectory, opts.cacheKey) : undefined),
         input: opts.entry,
@@ -57,6 +75,7 @@ async function rollupBundleFile(opts) {
             }),
             (0, plugin_json_1.default)(),
             opts.transform ? { transform: opts.transform, name: 'downlevel-ts' } : undefined,
+            terser.terser()
         ],
         onwarn: warning => {
             switch (warning.code) {
@@ -77,8 +96,9 @@ async function rollupBundleFile(opts) {
     // Output the bundle to disk
     const output = await bundle.write({
         name: opts.moduleName,
-        format: 'es',
+        format: opts.format,
         file: opts.dest,
+        compact: true,
         banner: '',
         sourcemap: true,
     });
@@ -95,13 +115,16 @@ async function rollupBundleFile(opts) {
     };
 }
 exports.rollupBundleFile = rollupBundleFile;
-function isExternalDependency(moduleId) {
+function isExternalDependency(moduleId, externalModuleIds) {
     // more information about why we don't check for 'node_modules' path
     // https://github.com/rollup/rollup-plugin-node-resolve/issues/110#issuecomment-350353632
     if (moduleId.startsWith('.') || moduleId.startsWith('/') || path.isAbsolute(moduleId)) {
         // if it's either 'absolute', marked to embed, starts with a '.' or '/' or is the umd bundle and is tslib
         return false;
     }
+    if (externalModuleIds.indexOf(moduleId) === -1) {
+        return false;
+    }
     return true;
 }
 //# sourceMappingURL=rollup.js.map
\ No newline at end of file
diff --git a/node_modules/ng-packagr/lib/ng-package/entry-point/entry-point.d.ts b/node_modules/ng-packagr/lib/ng-package/entry-point/entry-point.d.ts
index 898bdfa..446d090 100644
--- a/node_modules/ng-packagr/lib/ng-package/entry-point/entry-point.d.ts
+++ b/node_modules/ng-packagr/lib/ng-package/entry-point/entry-point.d.ts
@@ -10,6 +10,9 @@ export interface DestinationFiles {
     fesm2015: string;
     /** Absolute path of this entry point `ESM2020` module */
     esm2020: string;
+
+    /** Absolute path of this entry point `SystemJS` module */
+    system: string;
     /** Sub path of entrypoint distributable. */
     directory: string;
 }
diff --git a/node_modules/ng-packagr/lib/ng-package/entry-point/entry-point.js b/node_modules/ng-packagr/lib/ng-package/entry-point/entry-point.js
index 0221a03..c0d4cc7 100644
--- a/node_modules/ng-packagr/lib/ng-package/entry-point/entry-point.js
+++ b/node_modules/ng-packagr/lib/ng-package/entry-point/entry-point.js
@@ -102,6 +102,7 @@ class NgEntryPoint {
             esm2020: pathJoinWithDest('esm2020', secondaryDir, `${flatModuleFile}.mjs`),
             fesm2020: pathJoinWithDest('fesm2020', `${flatModuleFile}.mjs`),
             fesm2015: pathJoinWithDest('fesm2015', `${flatModuleFile}.mjs`),
+            system: pathJoinWithDest('system', `${flatModuleFile}.js`),
         };
     }
     $get(key) {
diff --git a/node_modules/ng-packagr/lib/ng-package/entry-point/write-bundles.transform.js b/node_modules/ng-packagr/lib/ng-package/entry-point/write-bundles.transform.js
index d4c7767..8ae1486 100644
--- a/node_modules/ng-packagr/lib/ng-package/entry-point/write-bundles.transform.js
+++ b/node_modules/ng-packagr/lib/ng-package/entry-point/write-bundles.transform.js
@@ -16,12 +16,13 @@ const writeBundlesTransform = (options) => (0, transform_1.transformFromPromise)
     const entryPoint = graph.find((0, nodes_1.isEntryPointInProgress)());
     const { destinationFiles, entryPoint: ngEntryPoint, tsConfig } = entryPoint.data;
     const cache = entryPoint.cache;
-    const { fesm2020, fesm2015, esm2020 } = destinationFiles;
+    const { fesm2020, fesm2015, esm2020, system } = destinationFiles;
     const spinner = (0, ora_1.default)({
         hideCursor: false,
         discardStdin: false,
     });
-    const key = await (0, cache_1.generateKey)(ngEntryPoint.moduleId, esm2020, 'fesm-bundles', tsConfig.options.compilationMode);
+    const cacheDirectory = options.cacheEnabled && options.cacheDirectory;
+   /* const key = await (0, cache_1.generateKey)(ngEntryPoint.moduleId, esm2020, 'fesm-bundles', tsConfig.options.compilationMode);
     const hash = await (0, cache_1.generateKey)(...[...cache.outputCache.values()].map(({ version }) => version));
     const cacheDirectory = options.cacheEnabled && options.cacheDirectory;
     if (cacheDirectory) {
@@ -50,13 +51,38 @@ const writeBundlesTransform = (options) => (0, transform_1.transformFromPromise)
     }
     const fesmCache = {
         hash,
-    };
+    }; */
+
     try {
+      spinner.start('Generating SystemJS');
+      const { cache: rollupSystemJsCache, code, map, } = await (0, rollup_1.rollupBundleFile)({
+        sourceRoot: tsConfig.options.sourceRoot,
+        entry: esm2020,
+        moduleName: null, // ngEntryPoint.moduleId,
+        format: 'system',
+        dest: system,
+        cache: cache.rollupSystemJsCache,
+        cacheDirectory,
+        fileCache: cache.outputCache,
+        cacheKey: await (0, cache_1.generateKey)(esm2020, ngEntryPoint.moduleId, system, tsConfig.options.compilationMode),
+      });
+      spinner.succeed();
+      if (options.watch) {
+        cache.rollupSystemJsCache = rollupSystemJsCache;
+      }
+    }
+    catch (error) {
+      spinner.fail();
+      throw error;
+    }
+
+    /*try {
         spinner.start('Generating FESM2020');
         const { cache: rollupFESMCache, code, map, } = await (0, rollup_1.rollupBundleFile)({
             sourceRoot: tsConfig.options.sourceRoot,
             entry: esm2020,
             moduleName: ngEntryPoint.moduleId,
+            format: 'es',
             dest: fesm2020,
             cache: cache.rollupFESM2020Cache,
             cacheDirectory,
@@ -82,6 +108,7 @@ const writeBundlesTransform = (options) => (0, transform_1.transformFromPromise)
             sourceRoot: tsConfig.options.sourceRoot,
             entry: esm2020,
             moduleName: ngEntryPoint.moduleId,
+            format: 'es',
             dest: fesm2015,
             transform: downlevel_plugin_1.downlevelCodeWithTsc,
             cache: cache.rollupFESM2015Cache,
@@ -104,7 +131,7 @@ const writeBundlesTransform = (options) => (0, transform_1.transformFromPromise)
     }
     if (cacheDirectory) {
         await (0, cache_1.saveCacheEntry)(cacheDirectory, key, JSON.stringify(fesmCache));
-    }
+    } */
 });
 exports.writeBundlesTransform = writeBundlesTransform;
 //# sourceMappingURL=write-bundles.transform.js.map
